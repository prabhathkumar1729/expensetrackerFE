@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient _http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-4" Width="550px">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              @bind-Value="Password"
                              Immediate="true"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Immediate="true"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="UpdatePassword" Variant="Variant.Filled" Color="Color.Default" Disabled="@(!success)">Update Password</MudButton>
    </DialogActions>
</MudDialog>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Email { get; set; }
    private string Password { get; set; }
    private string ConfirmPassword { get; set; }
    void Cancel() => MudDialog.Cancel();
    async void UpdatePassword()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Confirm to change password?");
        parameters.Add("ButtonText", "Confirm");
        parameters.Add("Color", Color.Warning);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ConfirmDialog>("Confirm", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {

            var response = await _http.PostAsJsonAsync("/api/User/changeUserPassword", new { Email = Email, Password = Password });
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Password Changed Successfully", MudBlazor.Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));

            }
            else
            {
                Snackbar.Add("Password Change Failed", MudBlazor.Severity.Error);
            }
        }
    }
}
