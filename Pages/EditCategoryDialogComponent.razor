@inject IDialogService DialogService
@inject IDispatcher Dispatcher
@using BlazorWalletTrackerFE.Store.CategoryStore;
@inject ISnackbar Snackbar;
@inject IState<CategoryState> CategoryStorage;

<MudDialog>
<DialogContent>
    <MudCard Width="300px">
            <MudTextField @bind-Value="@NewCategoryName" Label="Category Name" Required="true" MaxLength="15" RequiredError="Category Name cannot be empty" />
    </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string OldCategoryName { get; set; }
    [Parameter] public string NewCategoryName { get; set; }
    [Parameter] public int UserId { get; set; }
    void Cancel() => MudDialog.Cancel();
    async void Submit()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to update this category. This process cannot be undone.");
        parameters.Add("ButtonText", "Confirm");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Dispatcher.Dispatch(new UpdateCategoryAction { UserId = UserId, newCategory = NewCategoryName, oldCategory = OldCategoryName });
            MudDialog.Close(DialogResult.Ok(true));
        }

    }

}
