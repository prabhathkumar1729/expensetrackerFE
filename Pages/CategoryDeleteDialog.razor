@using BlazorWalletTrackerFE.Store.CategoryStore;
@inject ISnackbar Snackbar
@inject IDispatcher Dispatcher
@inject IState<CategoryState> CategoryStorage;
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudCard Width="550px" Height="150px">
        <MudText Typo="Typo.body2" Color="Color.Warning">Change Transactions Category: Change Transactions with the category to "Others" and then Delete Category</MudText>
        <MudText Typo="Typo.body2" Color="Color.Warning">Delete Associated Transactions: Will delete all the transactions associated with the category</MudText>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="ChangeTransactions">Change Transactions Category</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteTransactions">Delete Associated Transactions</MudButton>
    </DialogActions>
</MudDialog>
@code {
        [CascadingParameter] MudDialogInstance MudDialog { get; set; }
        [Parameter] public string Category { get; set; }
        [Parameter] public int UserId { get; set; }
        void Cancel() => MudDialog.Cancel();
        private async Task ChangeTransactions()
        {
            await JS.InvokeVoidAsync("console.log", " I RECEIVED THIS CATEGORY from table    ", Category);

            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you really want to change all the associated transactions to 'Other' Category and delete this Category? This process cannot be undone.");
            parameters.Add("ButtonText", "Delete");
            parameters.Add("Color", Color.Error);
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
            var dialog = DialogService.Show<ConfirmDialog>("Delete Category", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                Dispatcher.Dispatch(new DeleteCategoryAction { Category = Category, UserId = UserId });
                Snackbar.Add($"Category: {Category} deleted.", MudBlazor.Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            StateHasChanged();
            }
    }

private async Task DeleteTransactions()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete all the associated transactions with this category? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<ConfirmDialog>("Delete Category", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Dispatcher.Dispatch(new DeleteAllCategoryTransactionsAction { Category = Category, UserId = UserId });
            Snackbar.Add($"Category: {Category} deleted.", MudBlazor.Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            StateHasChanged();
        }
    }
}
