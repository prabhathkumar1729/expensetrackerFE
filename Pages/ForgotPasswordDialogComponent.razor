@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient _http

<MudDialog>
    <DialogContent>
        <MudCard Width="550px">
            <MudText Typo="Typo.h6">
                @Question
            </MudText>
            <MudTextField @bind-Value="Answer" Label="Answer" Required Immediate="true"/>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="string.IsNullOrWhiteSpace(Answer)" OnClick="Validate">Submit</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Question { get; set; }
    [Parameter] public string Email { get; set; }
    private string Answer { get; set; }
    void Cancel() => MudDialog.Cancel();

    async void Validate()
    {
        var response = await _http.PostAsJsonAsync("/api/User/isUserSecurityAnswerValid", new { Email = Email, SecurityAnswer = Answer });
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Answer is correct", MudBlazor.Severity.Success);
            var parameters = new DialogParameters();
            parameters.Add("Email", Email);
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
            var dialog = DialogService.Show<ChangePasswordDialogComponent>("Change Password", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        else
        {
            Snackbar.Add("Answer is incorrect", MudBlazor.Severity.Error);
        }
    }

}
